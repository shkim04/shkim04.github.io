{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-컴포넌트-밖-클릭-감지/","result":{"data":{"site":{"siteMetadata":{"title":"Seunghyun's Blog"}},"markdownRemark":{"id":"ca4b4f75-7bb2-5f4b-be93-bd29b9d57394","excerpt":"click-outside 이 글을 읽고 있다면 아마도 과  메뉴 같이 - 적어도 필자의 경우는 그랬다. 과  메뉴는 React 개발에 있어서 자주 쓰이는 UI 요소이기 때문에 React…","html":"<p><img src=\"/3f2fc5ce334dd7bb56703db1bbfe887f/click-outside.gif\" alt=\"click-outside\"></p>\n<p>이 글을 읽고 있다면 아마도 <code class=\"language-text\">modal</code>과 <code class=\"language-text\">dropdown</code> 메뉴 같이 - <em>적어도 필자의 경우는 그랬다</em>. <code class=\"language-text\">modal</code>과 <code class=\"language-text\">dropdown</code> 메뉴는 React 개발에 있어서 자주 쓰이는 UI 요소이기 때문에 React 개발자라면 클릭이 어디서 일어났는지 아는 방법을 찾고 싶어할 가능성이 높다. 이 글에서 그 방법에 대해 이야기하려고 한다.</p>\n<h2>ClickOutside 컴포넌트</h2>\n<p>필자는 컴포넌트 이름은 <strong>ClickOutside</strong>라고 지었는데 단순히 이 컴포넌트가 클릭 이벤트가 안팎 어디에서 감지되는지 확인하기 때문이다. 적절한 다른 이름이 생각나는 분은 다르게 지으셔도 좋다. 다음과 같은 접근으로 이 컴포넌트를 만들어 보자:</p>\n<p>첫째, <code class=\"language-text\">useRef</code> 훅을 사용해서 컴포넌트가 반환하는 외곽 div 태그를 컴포넌트 안에서 지칭할 수 있도록 한다.</p>\n<p>다음, 이벤트가 지칭된 외곽 <code class=\"language-text\">div</code> 태그 안팎 중 어디에서 발생했는지 결정하고 그 결과에 따라 행동을 취하는 핸들러 함수를 생성한다.</p>\n<p>마지막으로 <code class=\"language-text\">mousedown</code> 이벤트 리스너를 추가하여 클릭이 발생할 시 이 핸들러 함수가 실행하게 만든다.</p>\n<p>다음이 위에서 언급한 접근이 반영된 코드다:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ClickOutside</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> exceptionRef<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> wrapperRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> handleClickListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> handleClickListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClickListener</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> clickedInside<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>exceptionRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      clickedInside <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>wrapperRef <span class=\"token operator\">&amp;&amp;</span> wrapperRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> exceptionRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> exceptionRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      clickedInside <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>wrapperRef <span class=\"token operator\">&amp;&amp;</span> wrapperRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clickedInside<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  \r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>wrapperRef<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>className <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\r\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 컴포넌트는 parent 컴포넌트로부터 4개의 prop을 받는다.</p>\n<blockquote>\n<p><strong>children</strong> 지칭된 외곽 div 태그 안에 들어가는 컴포넌트 혹은 태그.</p>\n<p><strong>exceptionRef</strong> 이 컴포넌트의 기능에서 제외가 되는 지칭된 컴포넌트 혹은 태그. 즉, exceptionRef를 클릭할 시 <strong>ClickOutside</strong> 컴포넌트 안에서 발생한다고 간주한다.</p>\n<p><strong>onClick</strong> 컴포넌트 밖에서 클릭이 발생하면 실행되는 핸들러 함수.</p>\n<p><strong>className</strong> class 이름을 받아 css를 적용할 때 사용한다.</p>\n</blockquote>\n<h2>예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> ClickOuside <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/ClickOutside\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'container'</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>ClickOuside\r\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleText<span class=\"token punctuation\">}</span>\r\n      <span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'red-box'</span><span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n            If you click here inside <span class=\"token keyword\">this</span> red box<span class=\"token punctuation\">,</span> Nothing happens<span class=\"token punctuation\">.</span>\r\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ClickOuside<span class=\"token operator\">></span>\r\n      <span class=\"token punctuation\">{</span>\r\n        visible <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\r\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'hidden-text'</span><span class=\"token operator\">></span>\r\n            You clicked outside <span class=\"token keyword\">of</span> the red box<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>To make <span class=\"token keyword\">this</span> message disappear<span class=\"token punctuation\">,</span> click outside <span class=\"token keyword\">of</span> the red box again<span class=\"token punctuation\">.</span>\r\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n        <span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span> </code></pre></div>\n<p>red box라는 class 이름을 가진 <code class=\"language-text\">div</code> 태그를 생성하고 <em><strong>If you click here inside this red box, Nothing happens.</strong></em> 이라는 문자를 입력한다. 이 <code class=\"language-text\">div</code> 태그를 <strong>ClickOutside</strong> 컴포넌트로 감싼다.</p>\n<p>다음, 숨겨진 문자를 가진 <code class=\"language-text\">div</code> 태그의 노출 유무 상태를 전환하는 핸들러 함수를 <strong>ClickOutside</strong> 컴포넌트에 prop으로 보낸다.</p>\n<p>이제 빨간 상자 밖을 클릭하면 <em><strong>You clicked outside of the red box! To make this message disappear, click outside of the red box again.</strong></em> 라는 숨겨진 문자가 나타날 것이다. 다시 빨간 상자 밖을 클릭하면 문자가 사라질 것이다.</p>\n<p>다른 <code class=\"language-text\">div</code> 태그를 만들어 <code class=\"language-text\">useRef</code> 훅을 이용해서 지칭한 후 exceptionRef prop으로 보내서 그 <code class=\"language-text\">div</code> 태그를 클릭해보길 바란다. <strong>ClickOutside</strong> 컴포넌트 안쪽을 클릭할 때처럼 아무 변화가 없을 것이다.</p>\n<p>이 컴포넌트가 React 어플리케이션에 다양하게 쓰일 수 있을 거라고 생각한다. 필자는 이 글을 읽는 모든 분이 이 컴포넌트를 더 발전시켜 근사하게 사용하리라 믿는다.</p>\n<p><em><strong>읽어 주셔서 감사합니다. To be continued!</strong></em></p>\n<p><em>이 글은 <a href=\"https://medium.com/@shkim04/react-how-to-detect-click-outside-a-component-984fe2e003e8\">Medium</a>에도 업로드 되었습니다.</em>\r\n<em>놀러 오세요!</em></p>","frontmatter":{"title":"영역 밖에서 발생하는 클릭 감지하는 React 컴포넌트","date":"2023년 02월 19일","description":"","tag":["ReactJS"]},"fields":{"locale":"ko"}},"previous":{"fields":{"slug":"/crontab-실무-적용-예시"},"frontmatter":{"title":"Crontab 실무에 적용한 예"}},"next":{"fields":{"slug":"/custom-dropdown-react-컴포넌트"},"frontmatter":{"title":"Custom Dropdown React 컴포넌트"}}},"pageContext":{"locale":"ko","isDefaultLang":true,"slug":"/react-컴포넌트-밖-클릭-감지","titleByLang":{"ko":"react-컴포넌트-밖-클릭-감지","en":"how-to-detect-click-outside-react-component"},"dateFormat":"YYYY년 MM월 DD일","id":"ca4b4f75-7bb2-5f4b-be93-bd29b9d57394","previousPostId":"19cf70ee-6a68-50f6-b131-4b9c2367cc91","nextPostId":"afacb656-525e-5124-8d4a-c220bbcb02f9"}},"staticQueryHashes":[],"slicesMap":{}}