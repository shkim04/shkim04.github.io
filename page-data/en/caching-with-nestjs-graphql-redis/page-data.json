{"componentChunkName":"component---src-templates-blog-post-js","path":"/en/caching-with-nestjs-graphql-redis/","result":{"data":{"site":{"siteMetadata":{"title":"Seunghyun's Blog"}},"markdownRemark":{"id":"22b8f8e0-5999-58d7-bf20-6163370893eb","excerpt":"Even though our application does not seem to need caching at the moment, I have wanted to figure out how caching works with Nestjs and Graphql. So, we will…","html":"<p>Even though our application does not seem to need caching at the moment, I have wanted to figure out how caching works with Nestjs and Graphql. So, we will practice caching in our application.</p>\n<p>In Nestjs, it is easy to cache by using <code class=\"language-text\">cache-manager</code>. Let's begin with how to configure caching</p>\n<h2>Configrue cache using Redis</h2>\n<p>We will first install dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpm install @nestjs/cache-manager cache-manager</code></pre></div>\n<p>Instead of using in-memory cache by default, I have chosen to use <strong>Redis</strong> for caching. For that, we need to install additional dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpm install cache-manager-redis-store@2\r\npnpm install --save-dev @types/cache-manager-redis-store</code></pre></div>\n<p>Now, we will import cache module to enable caching in the <code class=\"language-text\">toilet.moduel.ts</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n  CacheModule<span class=\"token punctuation\">.</span><span class=\"token function\">registerAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">useFactory</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> ConfigService</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">ttl</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'REDIS_DEFAULT_TTL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">isGlobal</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> redisStore<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'REDIS_HOST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'REDIS_POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token comment\">//..</span>\r\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Notice that I have imported config module to configure Redis. It gives us flexibility to set up for multiple environments - <em>Give proper values for Redis in <code class=\"language-text\">.env</code> file</em>.</p>\n<h2>Run Redis locally with Docker</h2>\n<p>In the <code class=\"language-text\">docker-compose.yml</code>, we will add the following code to install and run Redis locally using Docker.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">services\r\n  redis:\r\n    container_name: cache\r\n    image: redis\r\n    ports:\r\n      - <span class=\"token number\">6379</span>:6379\r\n    volumes:\r\n      - redis:/data\r\nvolumes:\r\n  redis:\r\n    driver: <span class=\"token builtin class-name\">local</span></code></pre></div>\n<p>We can run Redis on the port 6379 locally by entering <code class=\"language-text\">docker-compose up -d</code>.</p>\n<h2>Cache a toilet</h2>\n<p>We will cache a toilet queried to see how caching works in the toilet service.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToiletsService</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\r\n    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CACHE_MANAGER</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">cacheService</span><span class=\"token operator\">:</span> Cache<span class=\"token punctuation\">,</span>\r\n    <span class=\"token comment\">//..</span>\r\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getToilet</span><span class=\"token punctuation\">(</span>getToiletArgs<span class=\"token operator\">:</span> GetToiletArgs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Toilet<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> cachedData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheService<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>Toilet<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>getToiletArgs<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cachedData<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> toilet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">getToilet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> getToiletArgs<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheService<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>getToiletArgs<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> toilet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> toilet<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token comment\">//..</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will inject cache manager into the constructor and then implement it in <code class=\"language-text\">getToilet</code> method. When queried, if the toilet is cached, it will return the cached value. Otherwise, it will return the matched value from the database and store it in Redis.</p>\n<h2>Check cached values in Redis</h2>\n<p>To see if cached value is stored in Redis, we can access the Redis docker container and check it using <code class=\"language-text\">redis-cli</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker exec -it [redis-container-id] redis-cli\r\n// if accessed\r\n\r\n127.0.0.1:6379> GET [id of toilet that was cached]\r\n\"{\\\"id\\\":\\\"[id of toilet that was cached]\\\",\\\"isPaid\\\":true,\\\"price\\\":1000}\"\r\nor\r\n(nil)</code></pre></div>\n<p>When making a toilet query, you will get the toilet information if cached or nil.</p>\n<h2>Thoughts</h2>\n<p>As I mentioned in the beginning, our application still does not seem to need caching yet. It is because there is not any complex operation that stays still for a long time and also not a lot of traffic yet. However, it is good to know how caching works and prepare to use it when necessary.</p>\n<p><em><strong>THANKS FOR READING. SEE YOU NEXT TIME!</strong></em></p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://docs.nestjs.com/techniques/caching\">https://docs.nestjs.com/techniques/caching</a></li>\n<li><a href=\"https://www.tomray.dev/nestjs-caching-redis\">https://www.tomray.dev/nestjs-caching-redis</a></li>\n</ul>","frontmatter":{"title":"#8 Caching with Nestjs, Graphql and Redis","date":"23 Aug, 2023","description":"","tag":["Project","NodeJS"]},"fields":{"locale":"en"}},"previous":{"fields":{"slug":"/en/refactor-guard-using-mixin-and-pipe"},"frontmatter":{"title":"#7 Refactor Guard using mixin/pipe and class-transformer"}},"next":{"fields":{"slug":"/en/nestjs-graphql-logging-and-exception-handling"},"frontmatter":{"title":"#9 Nestjs Graphql logging and exception handling"}}},"pageContext":{"locale":"en","isDefaultLang":false,"slug":"/en/caching-with-nestjs-graphql-redis","titleByLang":{"ko":"nestjs-graphql-redis로-캐싱하기","en":"caching-with-nestjs-graphql-redis"},"dateFormat":"DD MMM, YYYY","id":"22b8f8e0-5999-58d7-bf20-6163370893eb","previousPostId":"052a584a-dbe1-51e1-8d69-e9b69e0be8f2","nextPostId":"da6d2ba4-0779-58e4-b2f8-1d26d9017550"}},"staticQueryHashes":[],"slicesMap":{}}