{"componentChunkName":"component---src-templates-blog-post-js","path":"/en/refactor-guard-using-mixin-and-pipe/","result":{"data":{"site":{"siteMetadata":{"title":"Seunghyun's Blog"}},"markdownRemark":{"id":"052a584a-dbe1-51e1-8d69-e9b69e0be8f2","excerpt":"You can see the whole code on the nestjs-auth branch. Previously, we have only applied Guard to  method. I think that we should add the functionality to  method…","html":"<p><em>You can see the whole code on the <a href=\"https://github.com/shkim04/find-your-wc/tree/nestjs-auth\">nestjs-auth</a> branch.</em></p>\n<p>Previously, we have only applied <strong>Guard</strong> to <code class=\"language-text\">deleteReview</code> method. I think that we should add the functionality to <code class=\"language-text\">updateReview</code> method so that authenticated users can modify their reviews.</p>\n<p>However, if we implement the same Guard to the method, it won't work out. The reason is that the Guard we have created only takes <code class=\"language-text\">deleteReviewArgs</code> from <strong>context</strong>, which is the argument objects for the delete operation. We also need to take <code class=\"language-text\">updateReviewArgs</code> for the update operation to update. To do this, we have to let the Gaurd know what argument it takes. We can accomplish the mission using <code class=\"language-text\">mixin</code>.</p>\n<h2>Add mixin</h2>\n<p>In <code class=\"language-text\">auth/guards/gql.guard.ts</code>, we will wrap the Guard around a function that takes the name of the arguments and returns <code class=\"language-text\">mixin</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">ReviewGuard</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  @<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">GqlAuthGuard</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthGuard</span><span class=\"token punctuation\">(</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> GqlExecutionContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> GqlExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token comment\">// get the argument and save it on request body</span>\r\n      req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>GqlAuthGuard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With the <code class=\"language-text\">mixin</code>, we now have Guard that can be instantiated and take an argument. We will implement this Guard to both <code class=\"language-text\">updateReview</code> and <code class=\"language-text\">deleteReview</code> methods and pass in the name of each of the arguments to the Guard.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewResolver</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// ...</span>\r\n  @<span class=\"token function\">Mutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Review<span class=\"token punctuation\">)</span>\r\n  @<span class=\"token function\">UseGuards</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReviewGuard</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateReviewData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  @<span class=\"token function\">UsePipes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">async</span> <span class=\"token function\">updateReview</span><span class=\"token punctuation\">(</span>\r\n    @<span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateReviewData'</span><span class=\"token punctuation\">)</span> updateReviewData<span class=\"token operator\">:</span> UpdateReviewInput<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Review<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reviewService<span class=\"token punctuation\">.</span><span class=\"token function\">updateReview</span><span class=\"token punctuation\">(</span>updateReviewData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  @<span class=\"token function\">Mutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Review<span class=\"token punctuation\">)</span>\r\n  @<span class=\"token function\">UseGuards</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReviewGuard</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deleteReviewData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">async</span> <span class=\"token function\">deleteReview</span><span class=\"token punctuation\">(</span>\r\n    @<span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deleteReviewData'</span><span class=\"token punctuation\">)</span> deleteReviewData<span class=\"token operator\">:</span> DeleteReviewInput<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Review<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reviewService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteReview</span><span class=\"token punctuation\">(</span>deleteReviewData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, when we try to update a review and do the update operation for the same review, you will get <strong>Unauthorized</strong> exception from the server.</p>\n<p>It is because we have used <code class=\"language-text\">bcrypt</code> to hash a password and save it on our database, when the password passed in and not hashed overwrites the hashed password. There are two options to fix this problem. One is to hash the password in <code class=\"language-text\">updateReview</code> service. The other is to exclude the password before it reaches the router handler. We will talk about the latter one.</p>\n<h2>Exclude password using class-transformer and pipe</h2>\n<p>First of all, we will install <code class=\"language-text\">class-transformer</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpm install class-transformer</code></pre></div>\n<p>And then, we will annotate <code class=\"language-text\">password</code> field with <strong>@Exlucde()</strong> decorator in <code class=\"language-text\">UpdateReviewInput</code> model in <code class=\"language-text\">dto/args/update-review.input.ts</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">InputType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateReviewInput</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// ...</span>\r\n\r\n  @<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  @<span class=\"token function\">Exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we will apply <strong>ValidationPipes</strong> , which validates fields, to <code class=\"language-text\">updateReview</code> method. This pipe does exclude fields that are annotated with <strong>@Exlucde()</strong> decorator and if validated, let them go to the router handler. When we try to do the update operation, it will work out as expected now.</p>\n<blockquote>\n<p>Besides, I have also omitted the <strong>@Field()</strong> decorator from <code class=\"language-text\">password</code> field in <code class=\"language-text\">Review</code> model object so that clients cannot get the password information.</p>\n</blockquote>\n<p><em>You can see the whole code on the <a href=\"https://github.com/shkim04/find-your-wc/tree/nestjs-auth\">nestjs-auth</a> branch.</em></p>\n<p><em><strong>THANKS FOR READING. SEE YOU NEXT TIME!</strong></em></p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://docs.nestjs.com/techniques/serialization\">https://docs.nestjs.com/techniques/serialization</a></li>\n</ul>","frontmatter":{"title":"#7 Refactor Guard using mixin/pipe and class-transformer","date":"17 Aug, 2023","description":"","tag":["Project","NodeJS"]},"fields":{"locale":"en"}},"previous":{"fields":{"slug":"/en/improve-guards-using-nestjs-passport-bcrypt"},"frontmatter":{"title":"#6 Improve Guards using Nestjs passport and bcrypt"}},"next":{"fields":{"slug":"/en/caching-with-nestjs-graphql-redis"},"frontmatter":{"title":"#8 Caching with Nestjs, Graphql and Redis"}}},"pageContext":{"locale":"en","isDefaultLang":false,"slug":"/en/refactor-guard-using-mixin-and-pipe","titleByLang":{"ko":"mixin과-pipe로-guard-리팩토링하기","en":"refactor-guard-using-mixin-and-pipe"},"dateFormat":"DD MMM, YYYY","id":"052a584a-dbe1-51e1-8d69-e9b69e0be8f2","previousPostId":"0368bf23-3f6e-54ed-9b76-1d11a875458e","nextPostId":"22b8f8e0-5999-58d7-bf20-6163370893eb"}},"staticQueryHashes":[],"slicesMap":{}}