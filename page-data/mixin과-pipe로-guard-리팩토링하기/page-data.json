{"componentChunkName":"component---src-templates-blog-post-js","path":"/mixin과-pipe로-guard-리팩토링하기/","result":{"data":{"site":{"siteMetadata":{"title":"Seunghyun's Blog"}},"markdownRemark":{"id":"4eef3e9b-c412-5df2-aa8e-ea8346d1723e","excerpt":"nestjs-auth 브랜치에서 전체 코드를 확인하실 수 있습니다. 이전에 Guard를  메소드에 적용하였습니다. 이 기능을  메소드에도 동일하게 적용해서 인증된 사용자들이 자신들의 리뷰를 수정할 수 있게 해야 할 것입니다. 하지만 같은 Guard…","html":"<p><em><a href=\"https://github.com/shkim04/find-your-wc/tree/nestjs-auth\">nestjs-auth</a> 브랜치에서 전체 코드를 확인하실 수 있습니다.</em></p>\n<p>이전에 <strong>Guard</strong>를 <code class=\"language-text\">deleteReview</code> 메소드에 적용하였습니다. 이 기능을 <code class=\"language-text\">updateReview</code> 메소드에도 동일하게 적용해서 인증된 사용자들이 자신들의 리뷰를 수정할 수 있게 해야 할 것입니다.</p>\n<p>하지만 같은 Guard를 해당 메소드에 적용하게 되면 정상 작동을 하지 않을 것입니다. 이유는 이 Guard는 <strong>context</strong>로부터 삭제 작업을 위한 인자인 <code class=\"language-text\">deleteReviewArgs</code> 만을 받게끔 코드가 작성이 되었기 때문입니다. 수정 작업을 위한 <code class=\"language-text\">updateReviewArgs</code>도 받게끔 코드를 수정할 필요가 있습니다. 이를 위해서는 Guard가 어떤 인자를 받는지 알 수 있게 만들어줘야 합니다. 이는 <code class=\"language-text\">mixin</code>을 통해 구현이 가능합니다.</p>\n<h2>mixin 추가</h2>\n<p><code class=\"language-text\">auth/guards/gql.guard.ts</code> 파일에 있는 Guard를 인자의 이름을 전달받고 <code class=\"language-text\">mixin</code>을 반환하는 함수로 감쌉니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">ReviewGuard</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">GqlAuthGuard</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthGuard</span><span class=\"token punctuation\">(</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> GqlExecutionContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> GqlExecutionContext<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// get the argument and save it on request body</span>\n      req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> req<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>GqlAuthGuard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 <code class=\"language-text\">mixin</code>을 통해 인자를 전달받고 인스턴스화가 가능한 Guard를 얻게 됩니다. 이 Guard를 <code class=\"language-text\">updateReview</code>와 <code class=\"language-text\">deleteReview</code> 메소드 각각에 적용하고 인자의 이름을 Guard에 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewResolver</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  @<span class=\"token function\">Mutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Review<span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">UseGuards</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReviewGuard</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateReviewData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">UsePipes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">updateReview</span><span class=\"token punctuation\">(</span>\n    @<span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateReviewData'</span><span class=\"token punctuation\">)</span> updateReviewData<span class=\"token operator\">:</span> UpdateReviewInput<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Review<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reviewService<span class=\"token punctuation\">.</span><span class=\"token function\">updateReview</span><span class=\"token punctuation\">(</span>updateReviewData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Mutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Review<span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">UseGuards</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReviewGuard</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deleteReviewData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">deleteReview</span><span class=\"token punctuation\">(</span>\n    @<span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deleteReviewData'</span><span class=\"token punctuation\">)</span> deleteReviewData<span class=\"token operator\">:</span> DeleteReviewInput<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Review<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reviewService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteReview</span><span class=\"token punctuation\">(</span>deleteReviewData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 리뷰를 수정하고 같은 리뷰를 다시 수정을 했을 때 서버로부터 <strong>Unauthorized</strong> 메시지를 받을 것입니다.</p>\n<p>이는 필자가 비밀번호를 해싱(hash)하고 데이터베이스에 저장하기 위해 <code class=\"language-text\">bcrypt</code>를 사용했는데 해싱 처리가 되지 않고 전달받은 비밀번호가 기존 해싱이 된 비밀번호에 덮어 쓰기가 됐기 때문입니다. 이 문제를 해결하기 위한 두가지 선택지가 있습니다. 하나는 <code class=\"language-text\">updateReview</code> 서비스 층에서 비밀번호를 해싱 처리하는 것이고 다른 하나는 라우터 핸들러에 오기 전에 비밀번호를 제외하는 것입니다. 후자에 대해 얘기해보겠습니다.</p>\n<h2>class-transformer와 pipe 사용하여 비밀번호 제외하기</h2>\n<p>우선, <code class=\"language-text\">class-transformer</code>를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpm install class-transformer</code></pre></div>\n<p>그런 다음에 <code class=\"language-text\">dto/args/update-review.input.ts</code>에 있는 <code class=\"language-text\">UpdateReviewInput</code> 모델의 <code class=\"language-text\">password</code> 필드에 <strong>@Exlucde()</strong> 데코레이터를 적용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">InputType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateReviewInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  @<span class=\"token function\">Field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">Exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 필드값들을 타당성을 검증하는 <strong>ValidationPipes</strong>를 <code class=\"language-text\">updateReview</code> 메소드에 적용합니다. 이 파이프는 <strong>@Exlucde()</strong> 데코레이터가 표시된 필드들을 제외시키고 타당성 검증이 되었다면 라우터 핸들러로 갈 수 있게 합니다.\n이제 리뷰 수정을 다시 시도해보면 기대하는 바와 같이 정상적으로 작동하게 됩니다.</p>\n<blockquote>\n<p>이외에도 필자는 클라이언트로 비밀번호 정보를 전달하지 않도록 <code class=\"language-text\">Review</code> 모델 객체의 <code class=\"language-text\">password</code> 필드에서 <strong>@Field()</strong> 데코레이터를 삭제하였습니다.</p>\n</blockquote>\n<p><em><strong>읽어 주셔서 감사합니다. To be continued!</strong></em></p>\n<h3>참조</h3>\n<ul>\n<li><a href=\"https://docs.nestjs.com/techniques/serialization\">https://docs.nestjs.com/techniques/serialization</a></li>\n</ul>","frontmatter":{"title":"#7 Mixin과 Pipe로 Guard 리팩토링하기","date":"2023년 08월 17일","description":"","tag":["Project","NodeJS"]},"fields":{"locale":"ko"}},"previous":{"fields":{"slug":"/nestjs-passport-bcrypt로-guards-개선하기"},"frontmatter":{"title":"#6 Nestjs passport와 bcrypt로 Guard 개선하기"}},"next":{"fields":{"slug":"/nestjs-graphql-redis로-캐싱하기"},"frontmatter":{"title":"#8 Nestjs, Graphql과 Redis로 캐싱하기 "}}},"pageContext":{"locale":"ko","isDefaultLang":true,"slug":"/mixin과-pipe로-guard-리팩토링하기","titleByLang":{"ko":"mixin과-pipe로-guard-리팩토링하기","en":"refactor-guard-using-mixin-and-pipe"},"dateFormat":"YYYY년 MM월 DD일","id":"4eef3e9b-c412-5df2-aa8e-ea8346d1723e","previousPostId":"7507bc71-d607-5b2b-9641-2b62ddaec5fb","nextPostId":"744feab7-98cf-5ab2-85a6-6a161626d4d5"}},"staticQueryHashes":[],"slicesMap":{}}