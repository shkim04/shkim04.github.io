{"componentChunkName":"component---src-templates-blog-post-js","path":"/nestjs-graphql-redis로-캐싱하기/","result":{"data":{"site":{"siteMetadata":{"title":"Seunghyun's Blog"}},"markdownRemark":{"id":"38a4ae8c-8ace-501a-9644-b1569c6135a4","excerpt":"필자는 현재는 어플리케이션에 캐싱을 적용할 필요가 없지만 Nestjs와 Graphql에서 캐싱을 어떻게 적용하는지에 대해 알고 싶었습니다. 그래서 이 글에서는 캐싱에 대해 알아보겠습니다. Nestjs…","html":"<p>필자는 현재는 어플리케이션에 캐싱을 적용할 필요가 없지만 Nestjs와 Graphql에서 캐싱을 어떻게 적용하는지에 대해 알고 싶었습니다. 그래서 이 글에서는 캐싱에 대해 알아보겠습니다.</p>\n<p>Nestjs에서는 <code class=\"language-text\">cache-manager</code> 라이브러리를 이용하면 캐싱을 쉽게 구현할 수 있습니다. 이제 캐싱을 설정하는 법을 알아보겠습니다.</p>\n<h2>Redis를 활용한 캐싱</h2>\n<p>우선 디펜던시들을 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpm install @nestjs/cache-manager cache-manager</code></pre></div>\n<p>디폴트인 in-memory 캐싱을 사용하는 대신에 필자는 <strong>Redis</strong>를 사용하기로 했습니다. 이를 위해 필요한 디펜던시들을 추가적으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pnpm install cache-manager-redis-store@2\r\npnpm install --save-dev @types/cache-manager-redis-store</code></pre></div>\n<p>캐싱이 가능하게 만드려면 <code class=\"language-text\">toilet.moduel.ts</code> 파일에 cache 모듈을 import합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n  CacheModule<span class=\"token punctuation\">.</span><span class=\"token function\">registerAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">useFactory</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> ConfigService</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">ttl</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'REDIS_DEFAULT_TTL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">isGlobal</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> redisStore<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'REDIS_HOST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'REDIS_POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token comment\">//..</span>\r\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Redis 설정을 위해 config 모듈을 불러온 것을 확인하실 수 있습니다. 이는 여러 환경들을 대비하여 설정하기 위함입니다 - <em><code class=\"language-text\">.env</code>파일에 Redis 설정을 위한 적절한 값을 넣어주어야 합니다.</em></p>\n<h2>Docker로 Redis 시작</h2>\n<p><code class=\"language-text\">docker-compose.yml</code> 파일에 Docker를 이용해 Redis를 로컬 환경에서 설치 및 실행하기 위해 다음의 코드를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">services\r\n  redis:\r\n    container_name: cache\r\n    image: redis\r\n    ports:\r\n      - <span class=\"token number\">6379</span>:6379\r\n    volumes:\r\n      - redis:/data\r\nvolumes:\r\n  redis:\r\n    driver: <span class=\"token builtin class-name\">local</span></code></pre></div>\n<p><code class=\"language-text\">docker-compose up -d</code>을 입력하면 Redis가 포트 6379에서 실행이 될 것입니다.</p>\n<h2>toilet 캐싱</h2>\n<p>toilet 서비스에서 캐싱이 어떻게 되는지 알아보기 위해 toilet 쿼리를 캐싱해볼 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToiletsService</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\r\n    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CACHE_MANAGER</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">cacheService</span><span class=\"token operator\">:</span> Cache<span class=\"token punctuation\">,</span>\r\n    <span class=\"token comment\">//..</span>\r\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getToilet</span><span class=\"token punctuation\">(</span>getToiletArgs<span class=\"token operator\">:</span> GetToiletArgs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Toilet<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> cachedData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheService<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>Toilet<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>getToiletArgs<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cachedData<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> toilet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">getToilet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> getToiletArgs<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheService<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>getToiletArgs<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> toilet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> toilet<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token comment\">//..</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>cache manager를 contructor에 주입하고 <code class=\"language-text\">getToilet</code> 메소드에 캐싱을 적용할 것입니다. 쿼리를 전달받을 때 해당 toilet이 캐싱이 되었다면 캐싱이 된 값을 반환할 것이고 캐싱이 되지 않았다면 데이터 베이스에서 불러온 값을 반환하고 Redis에 저장하게 될 것입니다.</p>\n<h2>Redis에 저장된 캐싱 값 확인</h2>\n<p>캐싱이 된 값이 Redis에 저장이 되었는지 확인해 보기 위해 Redis docker 컨테이너를 접속한 뒤 <code class=\"language-text\">redis-cli</code>를 이용해 값을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker exec -it [redis-container-id] redis-cli\r\n// if accessed\r\n\r\n127.0.0.1:6379> GET [id of toilet that was cached]\r\n\"{\\\"id\\\":\\\"[id of toilet that was cached]\\\",\\\"isPaid\\\":true,\\\"price\\\":1000}\"\r\nor\r\n(nil)</code></pre></div>\n<p>toilet 쿼리를 전달할 때, 캐싱이 되었다면 해당 화장실 정보를 출력되고 그렇지 않다면 nil을 출력할 것입니다.</p>\n<h2>정리</h2>\n<p>글의 서두에서 언급했다시피 아직 이 어플리케이션은 캐싱이 필요하지 않을 수 있습니다. 아직 오랫동안 변화가 없으면서 복잡한 연산이 없고 트래픽이 많지 않기 때문입니다. 하지만 캐싱을 적용하는 법을 미리 익힌다면 캐싱이 필요할 때 빠르게 도움이 될 것이라고 생각합니다.</p>\n<p><em><strong>읽어 주셔서 감사합니다. To be continued!</strong></em></p>\n<h3>참조</h3>\n<ul>\n<li><a href=\"https://docs.nestjs.com/techniques/caching\">https://docs.nestjs.com/techniques/caching</a></li>\n<li><a href=\"https://www.tomray.dev/nestjs-caching-redis\">https://www.tomray.dev/nestjs-caching-redis</a></li>\n</ul>","frontmatter":{"title":"#8 Nestjs, Graphql과 Redis로 캐싱하기 ","date":"2023년 08월 23일","description":"","tag":["Project","NodeJS"]},"fields":{"locale":"ko"}},"previous":{"fields":{"slug":"/mixin과-pipe로-guard-리팩토링하기"},"frontmatter":{"title":"#7 Mixin과 Pipe로 Guard 리팩토링하기"}},"next":null},"pageContext":{"locale":"ko","isDefaultLang":true,"slug":"/nestjs-graphql-redis로-캐싱하기","titleByLang":{"ko":"nestjs-graphql-redis로-캐싱하기","en":"caching-with-nestjs-graphql-redis"},"dateFormat":"YYYY년 MM월 DD일","id":"38a4ae8c-8ace-501a-9644-b1569c6135a4","previousPostId":"3fae2e93-37f4-5121-9dd8-8e6e9525bc5f","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}